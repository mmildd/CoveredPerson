// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/mmildd_s/app/ent/migrate"

	"github.com/mmildd_s/app/ent/certificate"
	"github.com/mmildd_s/app/ent/coveredperson"
	"github.com/mmildd_s/app/ent/fund"
	"github.com/mmildd_s/app/ent/patient"
	"github.com/mmildd_s/app/ent/schemetype"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Certificate is the client for interacting with the Certificate builders.
	Certificate *CertificateClient
	// CoveredPerson is the client for interacting with the CoveredPerson builders.
	CoveredPerson *CoveredPersonClient
	// Fund is the client for interacting with the Fund builders.
	Fund *FundClient
	// Patient is the client for interacting with the Patient builders.
	Patient *PatientClient
	// SchemeType is the client for interacting with the SchemeType builders.
	SchemeType *SchemeTypeClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Certificate = NewCertificateClient(c.config)
	c.CoveredPerson = NewCoveredPersonClient(c.config)
	c.Fund = NewFundClient(c.config)
	c.Patient = NewPatientClient(c.config)
	c.SchemeType = NewSchemeTypeClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Certificate:   NewCertificateClient(cfg),
		CoveredPerson: NewCoveredPersonClient(cfg),
		Fund:          NewFundClient(cfg),
		Patient:       NewPatientClient(cfg),
		SchemeType:    NewSchemeTypeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:        cfg,
		Certificate:   NewCertificateClient(cfg),
		CoveredPerson: NewCoveredPersonClient(cfg),
		Fund:          NewFundClient(cfg),
		Patient:       NewPatientClient(cfg),
		SchemeType:    NewSchemeTypeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Certificate.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Certificate.Use(hooks...)
	c.CoveredPerson.Use(hooks...)
	c.Fund.Use(hooks...)
	c.Patient.Use(hooks...)
	c.SchemeType.Use(hooks...)
}

// CertificateClient is a client for the Certificate schema.
type CertificateClient struct {
	config
}

// NewCertificateClient returns a client for the Certificate from the given config.
func NewCertificateClient(c config) *CertificateClient {
	return &CertificateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `certificate.Hooks(f(g(h())))`.
func (c *CertificateClient) Use(hooks ...Hook) {
	c.hooks.Certificate = append(c.hooks.Certificate, hooks...)
}

// Create returns a create builder for Certificate.
func (c *CertificateClient) Create() *CertificateCreate {
	mutation := newCertificateMutation(c.config, OpCreate)
	return &CertificateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Certificate.
func (c *CertificateClient) Update() *CertificateUpdate {
	mutation := newCertificateMutation(c.config, OpUpdate)
	return &CertificateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CertificateClient) UpdateOne(ce *Certificate) *CertificateUpdateOne {
	mutation := newCertificateMutation(c.config, OpUpdateOne, withCertificate(ce))
	return &CertificateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CertificateClient) UpdateOneID(id int) *CertificateUpdateOne {
	mutation := newCertificateMutation(c.config, OpUpdateOne, withCertificateID(id))
	return &CertificateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Certificate.
func (c *CertificateClient) Delete() *CertificateDelete {
	mutation := newCertificateMutation(c.config, OpDelete)
	return &CertificateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CertificateClient) DeleteOne(ce *Certificate) *CertificateDeleteOne {
	return c.DeleteOneID(ce.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CertificateClient) DeleteOneID(id int) *CertificateDeleteOne {
	builder := c.Delete().Where(certificate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CertificateDeleteOne{builder}
}

// Create returns a query builder for Certificate.
func (c *CertificateClient) Query() *CertificateQuery {
	return &CertificateQuery{config: c.config}
}

// Get returns a Certificate entity by its id.
func (c *CertificateClient) Get(ctx context.Context, id int) (*Certificate, error) {
	return c.Query().Where(certificate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CertificateClient) GetX(ctx context.Context, id int) *Certificate {
	ce, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ce
}

// QueryCertificateCoveredPerson queries the Certificate_CoveredPerson edge of a Certificate.
func (c *CertificateClient) QueryCertificateCoveredPerson(ce *Certificate) *CoveredPersonQuery {
	query := &CoveredPersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(certificate.Table, certificate.FieldID, id),
			sqlgraph.To(coveredperson.Table, coveredperson.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, certificate.CertificateCoveredPersonTable, certificate.CertificateCoveredPersonColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CertificateClient) Hooks() []Hook {
	return c.hooks.Certificate
}

// CoveredPersonClient is a client for the CoveredPerson schema.
type CoveredPersonClient struct {
	config
}

// NewCoveredPersonClient returns a client for the CoveredPerson from the given config.
func NewCoveredPersonClient(c config) *CoveredPersonClient {
	return &CoveredPersonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coveredperson.Hooks(f(g(h())))`.
func (c *CoveredPersonClient) Use(hooks ...Hook) {
	c.hooks.CoveredPerson = append(c.hooks.CoveredPerson, hooks...)
}

// Create returns a create builder for CoveredPerson.
func (c *CoveredPersonClient) Create() *CoveredPersonCreate {
	mutation := newCoveredPersonMutation(c.config, OpCreate)
	return &CoveredPersonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for CoveredPerson.
func (c *CoveredPersonClient) Update() *CoveredPersonUpdate {
	mutation := newCoveredPersonMutation(c.config, OpUpdate)
	return &CoveredPersonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoveredPersonClient) UpdateOne(cp *CoveredPerson) *CoveredPersonUpdateOne {
	mutation := newCoveredPersonMutation(c.config, OpUpdateOne, withCoveredPerson(cp))
	return &CoveredPersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoveredPersonClient) UpdateOneID(id int) *CoveredPersonUpdateOne {
	mutation := newCoveredPersonMutation(c.config, OpUpdateOne, withCoveredPersonID(id))
	return &CoveredPersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CoveredPerson.
func (c *CoveredPersonClient) Delete() *CoveredPersonDelete {
	mutation := newCoveredPersonMutation(c.config, OpDelete)
	return &CoveredPersonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CoveredPersonClient) DeleteOne(cp *CoveredPerson) *CoveredPersonDeleteOne {
	return c.DeleteOneID(cp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CoveredPersonClient) DeleteOneID(id int) *CoveredPersonDeleteOne {
	builder := c.Delete().Where(coveredperson.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoveredPersonDeleteOne{builder}
}

// Create returns a query builder for CoveredPerson.
func (c *CoveredPersonClient) Query() *CoveredPersonQuery {
	return &CoveredPersonQuery{config: c.config}
}

// Get returns a CoveredPerson entity by its id.
func (c *CoveredPersonClient) Get(ctx context.Context, id int) (*CoveredPerson, error) {
	return c.Query().Where(coveredperson.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoveredPersonClient) GetX(ctx context.Context, id int) *CoveredPerson {
	cp, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cp
}

// QueryPatient queries the Patient edge of a CoveredPerson.
func (c *CoveredPersonClient) QueryPatient(cp *CoveredPerson) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coveredperson.Table, coveredperson.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coveredperson.PatientTable, coveredperson.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySchemeType queries the SchemeType edge of a CoveredPerson.
func (c *CoveredPersonClient) QuerySchemeType(cp *CoveredPerson) *SchemeTypeQuery {
	query := &SchemeTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coveredperson.Table, coveredperson.FieldID, id),
			sqlgraph.To(schemetype.Table, schemetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coveredperson.SchemeTypeTable, coveredperson.SchemeTypeColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFund queries the Fund edge of a CoveredPerson.
func (c *CoveredPersonClient) QueryFund(cp *CoveredPerson) *FundQuery {
	query := &FundQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coveredperson.Table, coveredperson.FieldID, id),
			sqlgraph.To(fund.Table, fund.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coveredperson.FundTable, coveredperson.FundColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCertificate queries the Certificate edge of a CoveredPerson.
func (c *CoveredPersonClient) QueryCertificate(cp *CoveredPerson) *CertificateQuery {
	query := &CertificateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coveredperson.Table, coveredperson.FieldID, id),
			sqlgraph.To(certificate.Table, certificate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coveredperson.CertificateTable, coveredperson.CertificateColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CoveredPersonClient) Hooks() []Hook {
	return c.hooks.CoveredPerson
}

// FundClient is a client for the Fund schema.
type FundClient struct {
	config
}

// NewFundClient returns a client for the Fund from the given config.
func NewFundClient(c config) *FundClient {
	return &FundClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fund.Hooks(f(g(h())))`.
func (c *FundClient) Use(hooks ...Hook) {
	c.hooks.Fund = append(c.hooks.Fund, hooks...)
}

// Create returns a create builder for Fund.
func (c *FundClient) Create() *FundCreate {
	mutation := newFundMutation(c.config, OpCreate)
	return &FundCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Fund.
func (c *FundClient) Update() *FundUpdate {
	mutation := newFundMutation(c.config, OpUpdate)
	return &FundUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FundClient) UpdateOne(f *Fund) *FundUpdateOne {
	mutation := newFundMutation(c.config, OpUpdateOne, withFund(f))
	return &FundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FundClient) UpdateOneID(id int) *FundUpdateOne {
	mutation := newFundMutation(c.config, OpUpdateOne, withFundID(id))
	return &FundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Fund.
func (c *FundClient) Delete() *FundDelete {
	mutation := newFundMutation(c.config, OpDelete)
	return &FundDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FundClient) DeleteOne(f *Fund) *FundDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FundClient) DeleteOneID(id int) *FundDeleteOne {
	builder := c.Delete().Where(fund.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FundDeleteOne{builder}
}

// Create returns a query builder for Fund.
func (c *FundClient) Query() *FundQuery {
	return &FundQuery{config: c.config}
}

// Get returns a Fund entity by its id.
func (c *FundClient) Get(ctx context.Context, id int) (*Fund, error) {
	return c.Query().Where(fund.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FundClient) GetX(ctx context.Context, id int) *Fund {
	f, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return f
}

// QueryFundCoveredPerson queries the Fund_CoveredPerson edge of a Fund.
func (c *FundClient) QueryFundCoveredPerson(f *Fund) *CoveredPersonQuery {
	query := &CoveredPersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fund.Table, fund.FieldID, id),
			sqlgraph.To(coveredperson.Table, coveredperson.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fund.FundCoveredPersonTable, fund.FundCoveredPersonColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FundClient) Hooks() []Hook {
	return c.hooks.Fund
}

// PatientClient is a client for the Patient schema.
type PatientClient struct {
	config
}

// NewPatientClient returns a client for the Patient from the given config.
func NewPatientClient(c config) *PatientClient {
	return &PatientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patient.Hooks(f(g(h())))`.
func (c *PatientClient) Use(hooks ...Hook) {
	c.hooks.Patient = append(c.hooks.Patient, hooks...)
}

// Create returns a create builder for Patient.
func (c *PatientClient) Create() *PatientCreate {
	mutation := newPatientMutation(c.config, OpCreate)
	return &PatientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Patient.
func (c *PatientClient) Update() *PatientUpdate {
	mutation := newPatientMutation(c.config, OpUpdate)
	return &PatientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientClient) UpdateOne(pa *Patient) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatient(pa))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientClient) UpdateOneID(id int) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatientID(id))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patient.
func (c *PatientClient) Delete() *PatientDelete {
	mutation := newPatientMutation(c.config, OpDelete)
	return &PatientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientClient) DeleteOne(pa *Patient) *PatientDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientClient) DeleteOneID(id int) *PatientDeleteOne {
	builder := c.Delete().Where(patient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientDeleteOne{builder}
}

// Create returns a query builder for Patient.
func (c *PatientClient) Query() *PatientQuery {
	return &PatientQuery{config: c.config}
}

// Get returns a Patient entity by its id.
func (c *PatientClient) Get(ctx context.Context, id int) (*Patient, error) {
	return c.Query().Where(patient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientClient) GetX(ctx context.Context, id int) *Patient {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryPatientCoveredPerson queries the Patient_CoveredPerson edge of a Patient.
func (c *PatientClient) QueryPatientCoveredPerson(pa *Patient) *CoveredPersonQuery {
	query := &CoveredPersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(coveredperson.Table, coveredperson.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.PatientCoveredPersonTable, patient.PatientCoveredPersonColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientClient) Hooks() []Hook {
	return c.hooks.Patient
}

// SchemeTypeClient is a client for the SchemeType schema.
type SchemeTypeClient struct {
	config
}

// NewSchemeTypeClient returns a client for the SchemeType from the given config.
func NewSchemeTypeClient(c config) *SchemeTypeClient {
	return &SchemeTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `schemetype.Hooks(f(g(h())))`.
func (c *SchemeTypeClient) Use(hooks ...Hook) {
	c.hooks.SchemeType = append(c.hooks.SchemeType, hooks...)
}

// Create returns a create builder for SchemeType.
func (c *SchemeTypeClient) Create() *SchemeTypeCreate {
	mutation := newSchemeTypeMutation(c.config, OpCreate)
	return &SchemeTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for SchemeType.
func (c *SchemeTypeClient) Update() *SchemeTypeUpdate {
	mutation := newSchemeTypeMutation(c.config, OpUpdate)
	return &SchemeTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SchemeTypeClient) UpdateOne(st *SchemeType) *SchemeTypeUpdateOne {
	mutation := newSchemeTypeMutation(c.config, OpUpdateOne, withSchemeType(st))
	return &SchemeTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SchemeTypeClient) UpdateOneID(id int) *SchemeTypeUpdateOne {
	mutation := newSchemeTypeMutation(c.config, OpUpdateOne, withSchemeTypeID(id))
	return &SchemeTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SchemeType.
func (c *SchemeTypeClient) Delete() *SchemeTypeDelete {
	mutation := newSchemeTypeMutation(c.config, OpDelete)
	return &SchemeTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SchemeTypeClient) DeleteOne(st *SchemeType) *SchemeTypeDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SchemeTypeClient) DeleteOneID(id int) *SchemeTypeDeleteOne {
	builder := c.Delete().Where(schemetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SchemeTypeDeleteOne{builder}
}

// Create returns a query builder for SchemeType.
func (c *SchemeTypeClient) Query() *SchemeTypeQuery {
	return &SchemeTypeQuery{config: c.config}
}

// Get returns a SchemeType entity by its id.
func (c *SchemeTypeClient) Get(ctx context.Context, id int) (*SchemeType, error) {
	return c.Query().Where(schemetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SchemeTypeClient) GetX(ctx context.Context, id int) *SchemeType {
	st, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return st
}

// QuerySchemeTypeCoveredPerson queries the SchemeType_CoveredPerson edge of a SchemeType.
func (c *SchemeTypeClient) QuerySchemeTypeCoveredPerson(st *SchemeType) *CoveredPersonQuery {
	query := &CoveredPersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(schemetype.Table, schemetype.FieldID, id),
			sqlgraph.To(coveredperson.Table, coveredperson.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, schemetype.SchemeTypeCoveredPersonTable, schemetype.SchemeTypeCoveredPersonColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SchemeTypeClient) Hooks() []Hook {
	return c.hooks.SchemeType
}
