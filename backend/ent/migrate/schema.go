// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"github.com/facebookincubator/ent/dialect/sql/schema"
	"github.com/facebookincubator/ent/schema/field"
)

var (
	// CertificatesColumns holds the columns for the "certificates" table.
	CertificatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "certificate_name", Type: field.TypeString},
	}
	// CertificatesTable holds the schema information for the "certificates" table.
	CertificatesTable = &schema.Table{
		Name:        "certificates",
		Columns:     CertificatesColumns,
		PrimaryKey:  []*schema.Column{CertificatesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// CoveredPersonsColumns holds the columns for the "covered_persons" table.
	CoveredPersonsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "Certificate_id", Type: field.TypeInt, Nullable: true},
		{Name: "Fund_id", Type: field.TypeInt, Nullable: true},
		{Name: "Patient_id", Type: field.TypeInt, Nullable: true},
		{Name: "SchemeType_id", Type: field.TypeInt, Nullable: true},
	}
	// CoveredPersonsTable holds the schema information for the "covered_persons" table.
	CoveredPersonsTable = &schema.Table{
		Name:       "covered_persons",
		Columns:    CoveredPersonsColumns,
		PrimaryKey: []*schema.Column{CoveredPersonsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "covered_persons_certificates_Certificate_CoveredPerson",
				Columns: []*schema.Column{CoveredPersonsColumns[1]},

				RefColumns: []*schema.Column{CertificatesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "covered_persons_funds_Fund_CoveredPerson",
				Columns: []*schema.Column{CoveredPersonsColumns[2]},

				RefColumns: []*schema.Column{FundsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "covered_persons_patients_Patient_CoveredPerson",
				Columns: []*schema.Column{CoveredPersonsColumns[3]},

				RefColumns: []*schema.Column{PatientsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "covered_persons_scheme_types_SchemeType_CoveredPerson",
				Columns: []*schema.Column{CoveredPersonsColumns[4]},

				RefColumns: []*schema.Column{SchemeTypesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// FundsColumns holds the columns for the "funds" table.
	FundsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "fund_name", Type: field.TypeString},
	}
	// FundsTable holds the schema information for the "funds" table.
	FundsTable = &schema.Table{
		Name:        "funds",
		Columns:     FundsColumns,
		PrimaryKey:  []*schema.Column{FundsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// PatientsColumns holds the columns for the "patients" table.
	PatientsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "patient_name", Type: field.TypeString},
		{Name: "patient_age", Type: field.TypeString},
		{Name: "patient_weight", Type: field.TypeString},
		{Name: "patient_height", Type: field.TypeString},
		{Name: "patient_prefix", Type: field.TypeString},
		{Name: "patient_gender", Type: field.TypeString},
		{Name: "patient_blood", Type: field.TypeString},
	}
	// PatientsTable holds the schema information for the "patients" table.
	PatientsTable = &schema.Table{
		Name:        "patients",
		Columns:     PatientsColumns,
		PrimaryKey:  []*schema.Column{PatientsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// SchemeTypesColumns holds the columns for the "scheme_types" table.
	SchemeTypesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "scheme_type_name", Type: field.TypeString},
	}
	// SchemeTypesTable holds the schema information for the "scheme_types" table.
	SchemeTypesTable = &schema.Table{
		Name:        "scheme_types",
		Columns:     SchemeTypesColumns,
		PrimaryKey:  []*schema.Column{SchemeTypesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CertificatesTable,
		CoveredPersonsTable,
		FundsTable,
		PatientsTable,
		SchemeTypesTable,
	}
)

func init() {
	CoveredPersonsTable.ForeignKeys[0].RefTable = CertificatesTable
	CoveredPersonsTable.ForeignKeys[1].RefTable = FundsTable
	CoveredPersonsTable.ForeignKeys[2].RefTable = PatientsTable
	CoveredPersonsTable.ForeignKeys[3].RefTable = SchemeTypesTable
}
