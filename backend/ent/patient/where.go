// Code generated by entc, DO NOT EDIT.

package patient

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/mmildd_s/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// PatientName applies equality check predicate on the "Patient_Name" field. It's identical to PatientNameEQ.
func PatientName(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPatientName), v))
	})
}

// PatientAge applies equality check predicate on the "Patient_Age" field. It's identical to PatientAgeEQ.
func PatientAge(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPatientAge), v))
	})
}

// PatientWeight applies equality check predicate on the "Patient_Weight" field. It's identical to PatientWeightEQ.
func PatientWeight(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPatientWeight), v))
	})
}

// PatientHeight applies equality check predicate on the "Patient_Height" field. It's identical to PatientHeightEQ.
func PatientHeight(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPatientHeight), v))
	})
}

// PatientPrefix applies equality check predicate on the "Patient_Prefix" field. It's identical to PatientPrefixEQ.
func PatientPrefix(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPatientPrefix), v))
	})
}

// PatientGender applies equality check predicate on the "Patient_Gender" field. It's identical to PatientGenderEQ.
func PatientGender(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPatientGender), v))
	})
}

// PatientBlood applies equality check predicate on the "Patient_Blood" field. It's identical to PatientBloodEQ.
func PatientBlood(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPatientBlood), v))
	})
}

// PatientNameEQ applies the EQ predicate on the "Patient_Name" field.
func PatientNameEQ(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPatientName), v))
	})
}

// PatientNameNEQ applies the NEQ predicate on the "Patient_Name" field.
func PatientNameNEQ(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPatientName), v))
	})
}

// PatientNameIn applies the In predicate on the "Patient_Name" field.
func PatientNameIn(vs ...string) predicate.Patient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPatientName), v...))
	})
}

// PatientNameNotIn applies the NotIn predicate on the "Patient_Name" field.
func PatientNameNotIn(vs ...string) predicate.Patient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPatientName), v...))
	})
}

// PatientNameGT applies the GT predicate on the "Patient_Name" field.
func PatientNameGT(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPatientName), v))
	})
}

// PatientNameGTE applies the GTE predicate on the "Patient_Name" field.
func PatientNameGTE(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPatientName), v))
	})
}

// PatientNameLT applies the LT predicate on the "Patient_Name" field.
func PatientNameLT(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPatientName), v))
	})
}

// PatientNameLTE applies the LTE predicate on the "Patient_Name" field.
func PatientNameLTE(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPatientName), v))
	})
}

// PatientNameContains applies the Contains predicate on the "Patient_Name" field.
func PatientNameContains(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPatientName), v))
	})
}

// PatientNameHasPrefix applies the HasPrefix predicate on the "Patient_Name" field.
func PatientNameHasPrefix(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPatientName), v))
	})
}

// PatientNameHasSuffix applies the HasSuffix predicate on the "Patient_Name" field.
func PatientNameHasSuffix(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPatientName), v))
	})
}

// PatientNameEqualFold applies the EqualFold predicate on the "Patient_Name" field.
func PatientNameEqualFold(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPatientName), v))
	})
}

// PatientNameContainsFold applies the ContainsFold predicate on the "Patient_Name" field.
func PatientNameContainsFold(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPatientName), v))
	})
}

// PatientAgeEQ applies the EQ predicate on the "Patient_Age" field.
func PatientAgeEQ(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPatientAge), v))
	})
}

// PatientAgeNEQ applies the NEQ predicate on the "Patient_Age" field.
func PatientAgeNEQ(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPatientAge), v))
	})
}

// PatientAgeIn applies the In predicate on the "Patient_Age" field.
func PatientAgeIn(vs ...string) predicate.Patient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPatientAge), v...))
	})
}

// PatientAgeNotIn applies the NotIn predicate on the "Patient_Age" field.
func PatientAgeNotIn(vs ...string) predicate.Patient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPatientAge), v...))
	})
}

// PatientAgeGT applies the GT predicate on the "Patient_Age" field.
func PatientAgeGT(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPatientAge), v))
	})
}

// PatientAgeGTE applies the GTE predicate on the "Patient_Age" field.
func PatientAgeGTE(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPatientAge), v))
	})
}

// PatientAgeLT applies the LT predicate on the "Patient_Age" field.
func PatientAgeLT(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPatientAge), v))
	})
}

// PatientAgeLTE applies the LTE predicate on the "Patient_Age" field.
func PatientAgeLTE(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPatientAge), v))
	})
}

// PatientAgeContains applies the Contains predicate on the "Patient_Age" field.
func PatientAgeContains(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPatientAge), v))
	})
}

// PatientAgeHasPrefix applies the HasPrefix predicate on the "Patient_Age" field.
func PatientAgeHasPrefix(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPatientAge), v))
	})
}

// PatientAgeHasSuffix applies the HasSuffix predicate on the "Patient_Age" field.
func PatientAgeHasSuffix(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPatientAge), v))
	})
}

// PatientAgeEqualFold applies the EqualFold predicate on the "Patient_Age" field.
func PatientAgeEqualFold(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPatientAge), v))
	})
}

// PatientAgeContainsFold applies the ContainsFold predicate on the "Patient_Age" field.
func PatientAgeContainsFold(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPatientAge), v))
	})
}

// PatientWeightEQ applies the EQ predicate on the "Patient_Weight" field.
func PatientWeightEQ(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPatientWeight), v))
	})
}

// PatientWeightNEQ applies the NEQ predicate on the "Patient_Weight" field.
func PatientWeightNEQ(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPatientWeight), v))
	})
}

// PatientWeightIn applies the In predicate on the "Patient_Weight" field.
func PatientWeightIn(vs ...string) predicate.Patient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPatientWeight), v...))
	})
}

// PatientWeightNotIn applies the NotIn predicate on the "Patient_Weight" field.
func PatientWeightNotIn(vs ...string) predicate.Patient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPatientWeight), v...))
	})
}

// PatientWeightGT applies the GT predicate on the "Patient_Weight" field.
func PatientWeightGT(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPatientWeight), v))
	})
}

// PatientWeightGTE applies the GTE predicate on the "Patient_Weight" field.
func PatientWeightGTE(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPatientWeight), v))
	})
}

// PatientWeightLT applies the LT predicate on the "Patient_Weight" field.
func PatientWeightLT(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPatientWeight), v))
	})
}

// PatientWeightLTE applies the LTE predicate on the "Patient_Weight" field.
func PatientWeightLTE(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPatientWeight), v))
	})
}

// PatientWeightContains applies the Contains predicate on the "Patient_Weight" field.
func PatientWeightContains(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPatientWeight), v))
	})
}

// PatientWeightHasPrefix applies the HasPrefix predicate on the "Patient_Weight" field.
func PatientWeightHasPrefix(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPatientWeight), v))
	})
}

// PatientWeightHasSuffix applies the HasSuffix predicate on the "Patient_Weight" field.
func PatientWeightHasSuffix(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPatientWeight), v))
	})
}

// PatientWeightEqualFold applies the EqualFold predicate on the "Patient_Weight" field.
func PatientWeightEqualFold(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPatientWeight), v))
	})
}

// PatientWeightContainsFold applies the ContainsFold predicate on the "Patient_Weight" field.
func PatientWeightContainsFold(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPatientWeight), v))
	})
}

// PatientHeightEQ applies the EQ predicate on the "Patient_Height" field.
func PatientHeightEQ(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPatientHeight), v))
	})
}

// PatientHeightNEQ applies the NEQ predicate on the "Patient_Height" field.
func PatientHeightNEQ(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPatientHeight), v))
	})
}

// PatientHeightIn applies the In predicate on the "Patient_Height" field.
func PatientHeightIn(vs ...string) predicate.Patient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPatientHeight), v...))
	})
}

// PatientHeightNotIn applies the NotIn predicate on the "Patient_Height" field.
func PatientHeightNotIn(vs ...string) predicate.Patient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPatientHeight), v...))
	})
}

// PatientHeightGT applies the GT predicate on the "Patient_Height" field.
func PatientHeightGT(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPatientHeight), v))
	})
}

// PatientHeightGTE applies the GTE predicate on the "Patient_Height" field.
func PatientHeightGTE(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPatientHeight), v))
	})
}

// PatientHeightLT applies the LT predicate on the "Patient_Height" field.
func PatientHeightLT(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPatientHeight), v))
	})
}

// PatientHeightLTE applies the LTE predicate on the "Patient_Height" field.
func PatientHeightLTE(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPatientHeight), v))
	})
}

// PatientHeightContains applies the Contains predicate on the "Patient_Height" field.
func PatientHeightContains(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPatientHeight), v))
	})
}

// PatientHeightHasPrefix applies the HasPrefix predicate on the "Patient_Height" field.
func PatientHeightHasPrefix(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPatientHeight), v))
	})
}

// PatientHeightHasSuffix applies the HasSuffix predicate on the "Patient_Height" field.
func PatientHeightHasSuffix(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPatientHeight), v))
	})
}

// PatientHeightEqualFold applies the EqualFold predicate on the "Patient_Height" field.
func PatientHeightEqualFold(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPatientHeight), v))
	})
}

// PatientHeightContainsFold applies the ContainsFold predicate on the "Patient_Height" field.
func PatientHeightContainsFold(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPatientHeight), v))
	})
}

// PatientPrefixEQ applies the EQ predicate on the "Patient_Prefix" field.
func PatientPrefixEQ(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPatientPrefix), v))
	})
}

// PatientPrefixNEQ applies the NEQ predicate on the "Patient_Prefix" field.
func PatientPrefixNEQ(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPatientPrefix), v))
	})
}

// PatientPrefixIn applies the In predicate on the "Patient_Prefix" field.
func PatientPrefixIn(vs ...string) predicate.Patient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPatientPrefix), v...))
	})
}

// PatientPrefixNotIn applies the NotIn predicate on the "Patient_Prefix" field.
func PatientPrefixNotIn(vs ...string) predicate.Patient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPatientPrefix), v...))
	})
}

// PatientPrefixGT applies the GT predicate on the "Patient_Prefix" field.
func PatientPrefixGT(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPatientPrefix), v))
	})
}

// PatientPrefixGTE applies the GTE predicate on the "Patient_Prefix" field.
func PatientPrefixGTE(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPatientPrefix), v))
	})
}

// PatientPrefixLT applies the LT predicate on the "Patient_Prefix" field.
func PatientPrefixLT(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPatientPrefix), v))
	})
}

// PatientPrefixLTE applies the LTE predicate on the "Patient_Prefix" field.
func PatientPrefixLTE(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPatientPrefix), v))
	})
}

// PatientPrefixContains applies the Contains predicate on the "Patient_Prefix" field.
func PatientPrefixContains(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPatientPrefix), v))
	})
}

// PatientPrefixHasPrefix applies the HasPrefix predicate on the "Patient_Prefix" field.
func PatientPrefixHasPrefix(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPatientPrefix), v))
	})
}

// PatientPrefixHasSuffix applies the HasSuffix predicate on the "Patient_Prefix" field.
func PatientPrefixHasSuffix(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPatientPrefix), v))
	})
}

// PatientPrefixEqualFold applies the EqualFold predicate on the "Patient_Prefix" field.
func PatientPrefixEqualFold(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPatientPrefix), v))
	})
}

// PatientPrefixContainsFold applies the ContainsFold predicate on the "Patient_Prefix" field.
func PatientPrefixContainsFold(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPatientPrefix), v))
	})
}

// PatientGenderEQ applies the EQ predicate on the "Patient_Gender" field.
func PatientGenderEQ(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPatientGender), v))
	})
}

// PatientGenderNEQ applies the NEQ predicate on the "Patient_Gender" field.
func PatientGenderNEQ(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPatientGender), v))
	})
}

// PatientGenderIn applies the In predicate on the "Patient_Gender" field.
func PatientGenderIn(vs ...string) predicate.Patient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPatientGender), v...))
	})
}

// PatientGenderNotIn applies the NotIn predicate on the "Patient_Gender" field.
func PatientGenderNotIn(vs ...string) predicate.Patient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPatientGender), v...))
	})
}

// PatientGenderGT applies the GT predicate on the "Patient_Gender" field.
func PatientGenderGT(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPatientGender), v))
	})
}

// PatientGenderGTE applies the GTE predicate on the "Patient_Gender" field.
func PatientGenderGTE(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPatientGender), v))
	})
}

// PatientGenderLT applies the LT predicate on the "Patient_Gender" field.
func PatientGenderLT(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPatientGender), v))
	})
}

// PatientGenderLTE applies the LTE predicate on the "Patient_Gender" field.
func PatientGenderLTE(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPatientGender), v))
	})
}

// PatientGenderContains applies the Contains predicate on the "Patient_Gender" field.
func PatientGenderContains(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPatientGender), v))
	})
}

// PatientGenderHasPrefix applies the HasPrefix predicate on the "Patient_Gender" field.
func PatientGenderHasPrefix(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPatientGender), v))
	})
}

// PatientGenderHasSuffix applies the HasSuffix predicate on the "Patient_Gender" field.
func PatientGenderHasSuffix(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPatientGender), v))
	})
}

// PatientGenderEqualFold applies the EqualFold predicate on the "Patient_Gender" field.
func PatientGenderEqualFold(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPatientGender), v))
	})
}

// PatientGenderContainsFold applies the ContainsFold predicate on the "Patient_Gender" field.
func PatientGenderContainsFold(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPatientGender), v))
	})
}

// PatientBloodEQ applies the EQ predicate on the "Patient_Blood" field.
func PatientBloodEQ(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPatientBlood), v))
	})
}

// PatientBloodNEQ applies the NEQ predicate on the "Patient_Blood" field.
func PatientBloodNEQ(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPatientBlood), v))
	})
}

// PatientBloodIn applies the In predicate on the "Patient_Blood" field.
func PatientBloodIn(vs ...string) predicate.Patient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPatientBlood), v...))
	})
}

// PatientBloodNotIn applies the NotIn predicate on the "Patient_Blood" field.
func PatientBloodNotIn(vs ...string) predicate.Patient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patient(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPatientBlood), v...))
	})
}

// PatientBloodGT applies the GT predicate on the "Patient_Blood" field.
func PatientBloodGT(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPatientBlood), v))
	})
}

// PatientBloodGTE applies the GTE predicate on the "Patient_Blood" field.
func PatientBloodGTE(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPatientBlood), v))
	})
}

// PatientBloodLT applies the LT predicate on the "Patient_Blood" field.
func PatientBloodLT(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPatientBlood), v))
	})
}

// PatientBloodLTE applies the LTE predicate on the "Patient_Blood" field.
func PatientBloodLTE(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPatientBlood), v))
	})
}

// PatientBloodContains applies the Contains predicate on the "Patient_Blood" field.
func PatientBloodContains(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPatientBlood), v))
	})
}

// PatientBloodHasPrefix applies the HasPrefix predicate on the "Patient_Blood" field.
func PatientBloodHasPrefix(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPatientBlood), v))
	})
}

// PatientBloodHasSuffix applies the HasSuffix predicate on the "Patient_Blood" field.
func PatientBloodHasSuffix(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPatientBlood), v))
	})
}

// PatientBloodEqualFold applies the EqualFold predicate on the "Patient_Blood" field.
func PatientBloodEqualFold(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPatientBlood), v))
	})
}

// PatientBloodContainsFold applies the ContainsFold predicate on the "Patient_Blood" field.
func PatientBloodContainsFold(v string) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPatientBlood), v))
	})
}

// HasPatientCoveredPerson applies the HasEdge predicate on the "Patient_CoveredPerson" edge.
func HasPatientCoveredPerson() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientCoveredPersonTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PatientCoveredPersonTable, PatientCoveredPersonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientCoveredPersonWith applies the HasEdge predicate on the "Patient_CoveredPerson" edge with a given conditions (other predicates).
func HasPatientCoveredPersonWith(preds ...predicate.CoveredPerson) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientCoveredPersonInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PatientCoveredPersonTable, PatientCoveredPersonColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Patient) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Patient) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Patient) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		p(s.Not())
	})
}
