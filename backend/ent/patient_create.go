// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/mmildd_s/app/ent/coveredperson"
	"github.com/mmildd_s/app/ent/patient"
)

// PatientCreate is the builder for creating a Patient entity.
type PatientCreate struct {
	config
	mutation *PatientMutation
	hooks    []Hook
}

// SetPatientName sets the Patient_Name field.
func (pc *PatientCreate) SetPatientName(s string) *PatientCreate {
	pc.mutation.SetPatientName(s)
	return pc
}

// SetPatientAge sets the Patient_Age field.
func (pc *PatientCreate) SetPatientAge(s string) *PatientCreate {
	pc.mutation.SetPatientAge(s)
	return pc
}

// SetPatientWeight sets the Patient_Weight field.
func (pc *PatientCreate) SetPatientWeight(s string) *PatientCreate {
	pc.mutation.SetPatientWeight(s)
	return pc
}

// SetPatientHeight sets the Patient_Height field.
func (pc *PatientCreate) SetPatientHeight(s string) *PatientCreate {
	pc.mutation.SetPatientHeight(s)
	return pc
}

// SetPatientPrefix sets the Patient_Prefix field.
func (pc *PatientCreate) SetPatientPrefix(s string) *PatientCreate {
	pc.mutation.SetPatientPrefix(s)
	return pc
}

// SetPatientGender sets the Patient_Gender field.
func (pc *PatientCreate) SetPatientGender(s string) *PatientCreate {
	pc.mutation.SetPatientGender(s)
	return pc
}

// SetPatientBlood sets the Patient_Blood field.
func (pc *PatientCreate) SetPatientBlood(s string) *PatientCreate {
	pc.mutation.SetPatientBlood(s)
	return pc
}

// AddPatientCoveredPersonIDs adds the Patient_CoveredPerson edge to CoveredPerson by ids.
func (pc *PatientCreate) AddPatientCoveredPersonIDs(ids ...int) *PatientCreate {
	pc.mutation.AddPatientCoveredPersonIDs(ids...)
	return pc
}

// AddPatientCoveredPerson adds the Patient_CoveredPerson edges to CoveredPerson.
func (pc *PatientCreate) AddPatientCoveredPerson(c ...*CoveredPerson) *PatientCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddPatientCoveredPersonIDs(ids...)
}

// Mutation returns the PatientMutation object of the builder.
func (pc *PatientCreate) Mutation() *PatientMutation {
	return pc.mutation
}

// Save creates the Patient in the database.
func (pc *PatientCreate) Save(ctx context.Context) (*Patient, error) {
	if _, ok := pc.mutation.PatientName(); !ok {
		return nil, &ValidationError{Name: "Patient_Name", err: errors.New("ent: missing required field \"Patient_Name\"")}
	}
	if v, ok := pc.mutation.PatientName(); ok {
		if err := patient.PatientNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "Patient_Name", err: fmt.Errorf("ent: validator failed for field \"Patient_Name\": %w", err)}
		}
	}
	if _, ok := pc.mutation.PatientAge(); !ok {
		return nil, &ValidationError{Name: "Patient_Age", err: errors.New("ent: missing required field \"Patient_Age\"")}
	}
	if v, ok := pc.mutation.PatientAge(); ok {
		if err := patient.PatientAgeValidator(v); err != nil {
			return nil, &ValidationError{Name: "Patient_Age", err: fmt.Errorf("ent: validator failed for field \"Patient_Age\": %w", err)}
		}
	}
	if _, ok := pc.mutation.PatientWeight(); !ok {
		return nil, &ValidationError{Name: "Patient_Weight", err: errors.New("ent: missing required field \"Patient_Weight\"")}
	}
	if v, ok := pc.mutation.PatientWeight(); ok {
		if err := patient.PatientWeightValidator(v); err != nil {
			return nil, &ValidationError{Name: "Patient_Weight", err: fmt.Errorf("ent: validator failed for field \"Patient_Weight\": %w", err)}
		}
	}
	if _, ok := pc.mutation.PatientHeight(); !ok {
		return nil, &ValidationError{Name: "Patient_Height", err: errors.New("ent: missing required field \"Patient_Height\"")}
	}
	if v, ok := pc.mutation.PatientHeight(); ok {
		if err := patient.PatientHeightValidator(v); err != nil {
			return nil, &ValidationError{Name: "Patient_Height", err: fmt.Errorf("ent: validator failed for field \"Patient_Height\": %w", err)}
		}
	}
	if _, ok := pc.mutation.PatientPrefix(); !ok {
		return nil, &ValidationError{Name: "Patient_Prefix", err: errors.New("ent: missing required field \"Patient_Prefix\"")}
	}
	if v, ok := pc.mutation.PatientPrefix(); ok {
		if err := patient.PatientPrefixValidator(v); err != nil {
			return nil, &ValidationError{Name: "Patient_Prefix", err: fmt.Errorf("ent: validator failed for field \"Patient_Prefix\": %w", err)}
		}
	}
	if _, ok := pc.mutation.PatientGender(); !ok {
		return nil, &ValidationError{Name: "Patient_Gender", err: errors.New("ent: missing required field \"Patient_Gender\"")}
	}
	if v, ok := pc.mutation.PatientGender(); ok {
		if err := patient.PatientGenderValidator(v); err != nil {
			return nil, &ValidationError{Name: "Patient_Gender", err: fmt.Errorf("ent: validator failed for field \"Patient_Gender\": %w", err)}
		}
	}
	if _, ok := pc.mutation.PatientBlood(); !ok {
		return nil, &ValidationError{Name: "Patient_Blood", err: errors.New("ent: missing required field \"Patient_Blood\"")}
	}
	if v, ok := pc.mutation.PatientBlood(); ok {
		if err := patient.PatientBloodValidator(v); err != nil {
			return nil, &ValidationError{Name: "Patient_Blood", err: fmt.Errorf("ent: validator failed for field \"Patient_Blood\": %w", err)}
		}
	}
	var (
		err  error
		node *Patient
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PatientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PatientCreate) SaveX(ctx context.Context) *Patient {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PatientCreate) sqlSave(ctx context.Context) (*Patient, error) {
	pa, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pa.ID = int(id)
	return pa, nil
}

func (pc *PatientCreate) createSpec() (*Patient, *sqlgraph.CreateSpec) {
	var (
		pa    = &Patient{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: patient.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: patient.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.PatientName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patient.FieldPatientName,
		})
		pa.PatientName = value
	}
	if value, ok := pc.mutation.PatientAge(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patient.FieldPatientAge,
		})
		pa.PatientAge = value
	}
	if value, ok := pc.mutation.PatientWeight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patient.FieldPatientWeight,
		})
		pa.PatientWeight = value
	}
	if value, ok := pc.mutation.PatientHeight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patient.FieldPatientHeight,
		})
		pa.PatientHeight = value
	}
	if value, ok := pc.mutation.PatientPrefix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patient.FieldPatientPrefix,
		})
		pa.PatientPrefix = value
	}
	if value, ok := pc.mutation.PatientGender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patient.FieldPatientGender,
		})
		pa.PatientGender = value
	}
	if value, ok := pc.mutation.PatientBlood(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patient.FieldPatientBlood,
		})
		pa.PatientBlood = value
	}
	if nodes := pc.mutation.PatientCoveredPersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientCoveredPersonTable,
			Columns: []string{patient.PatientCoveredPersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: coveredperson.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pa, _spec
}
