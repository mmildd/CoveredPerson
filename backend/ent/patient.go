// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/mmildd_s/app/ent/patient"
)

// Patient is the model entity for the Patient schema.
type Patient struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PatientName holds the value of the "Patient_Name" field.
	PatientName string `json:"Patient_Name,omitempty"`
	// PatientAge holds the value of the "Patient_Age" field.
	PatientAge string `json:"Patient_Age,omitempty"`
	// PatientWeight holds the value of the "Patient_Weight" field.
	PatientWeight string `json:"Patient_Weight,omitempty"`
	// PatientHeight holds the value of the "Patient_Height" field.
	PatientHeight string `json:"Patient_Height,omitempty"`
	// PatientPrefix holds the value of the "Patient_Prefix" field.
	PatientPrefix string `json:"Patient_Prefix,omitempty"`
	// PatientGender holds the value of the "Patient_Gender" field.
	PatientGender string `json:"Patient_Gender,omitempty"`
	// PatientBlood holds the value of the "Patient_Blood" field.
	PatientBlood string `json:"Patient_Blood,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PatientQuery when eager-loading is set.
	Edges PatientEdges `json:"edges"`
}

// PatientEdges holds the relations/edges for other nodes in the graph.
type PatientEdges struct {
	// PatientCoveredPerson holds the value of the Patient_CoveredPerson edge.
	PatientCoveredPerson []*CoveredPerson
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PatientCoveredPersonOrErr returns the PatientCoveredPerson value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) PatientCoveredPersonOrErr() ([]*CoveredPerson, error) {
	if e.loadedTypes[0] {
		return e.PatientCoveredPerson, nil
	}
	return nil, &NotLoadedError{edge: "Patient_CoveredPerson"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Patient) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Patient_Name
		&sql.NullString{}, // Patient_Age
		&sql.NullString{}, // Patient_Weight
		&sql.NullString{}, // Patient_Height
		&sql.NullString{}, // Patient_Prefix
		&sql.NullString{}, // Patient_Gender
		&sql.NullString{}, // Patient_Blood
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Patient fields.
func (pa *Patient) assignValues(values ...interface{}) error {
	if m, n := len(values), len(patient.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pa.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Patient_Name", values[0])
	} else if value.Valid {
		pa.PatientName = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Patient_Age", values[1])
	} else if value.Valid {
		pa.PatientAge = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Patient_Weight", values[2])
	} else if value.Valid {
		pa.PatientWeight = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Patient_Height", values[3])
	} else if value.Valid {
		pa.PatientHeight = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Patient_Prefix", values[4])
	} else if value.Valid {
		pa.PatientPrefix = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Patient_Gender", values[5])
	} else if value.Valid {
		pa.PatientGender = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Patient_Blood", values[6])
	} else if value.Valid {
		pa.PatientBlood = value.String
	}
	return nil
}

// QueryPatientCoveredPerson queries the Patient_CoveredPerson edge of the Patient.
func (pa *Patient) QueryPatientCoveredPerson() *CoveredPersonQuery {
	return (&PatientClient{config: pa.config}).QueryPatientCoveredPerson(pa)
}

// Update returns a builder for updating this Patient.
// Note that, you need to call Patient.Unwrap() before calling this method, if this Patient
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Patient) Update() *PatientUpdateOne {
	return (&PatientClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pa *Patient) Unwrap() *Patient {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Patient is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Patient) String() string {
	var builder strings.Builder
	builder.WriteString("Patient(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", Patient_Name=")
	builder.WriteString(pa.PatientName)
	builder.WriteString(", Patient_Age=")
	builder.WriteString(pa.PatientAge)
	builder.WriteString(", Patient_Weight=")
	builder.WriteString(pa.PatientWeight)
	builder.WriteString(", Patient_Height=")
	builder.WriteString(pa.PatientHeight)
	builder.WriteString(", Patient_Prefix=")
	builder.WriteString(pa.PatientPrefix)
	builder.WriteString(", Patient_Gender=")
	builder.WriteString(pa.PatientGender)
	builder.WriteString(", Patient_Blood=")
	builder.WriteString(pa.PatientBlood)
	builder.WriteByte(')')
	return builder.String()
}

// Patients is a parsable slice of Patient.
type Patients []*Patient

func (pa Patients) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
